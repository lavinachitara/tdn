<?php
App::uses('AppController', 'Controller');
App::uses('CakeEmail', 'Network/Email');
/**
 * Testdrives Controller
 *
 * @property Testdrive $Testdrive
 * @property PaginatorComponent $Paginator
 */
class TestdrivesController extends AppController {

	/**
	 * Components
	 *
	 * @var array
	 */
	public $components = array('Paginator');

	/**
	 * beforeFilter method
	 *
	 * @return void
	 */
	 /*
	public function beforeFilter() {
		parent::beforeFilter();
		
		if($this->Auth->loggedIn()){
			if(!$this->Auth->user('isAdmin') && !$this->Auth->user('isDealer'))
			{
				$deny_user_action = Configure::read('deny_user_action'); 
				$action = strtolower($this->request->action);	
				if(in_array($action,$deny_user_action))
				{
					$this->redirect('listrequests');
				}
			}
		}
	}
	*/
	
	/**
	 * index method
	 *
	 * @return void
	 */
	public function index() {
		$this->Testdrive->recursive = 0;
		$this->set('testdrives', $this->Paginator->paginate());
	}

	/**
	 * view method
	 *
	 * @throws NotFoundException
	 * @param string $id
	 * @return void
	 */
	public function view($id = null) {
		if (!$this->Testdrive->exists($id)) {
			throw new NotFoundException(__('Invalid testdrive'));
		}
		$options = array('conditions' => array('Testdrive.' . $this->Testdrive->primaryKey => $id));
		$this->set('testdrive', $this->Testdrive->find('first', $options));
	}

	/**
	 * add method
	 *
	 * @return void
	 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Testdrive->create();
			if ($this->Testdrive->save($this->request->data)) {
				$this->Session->setFlash(__('The testdrive has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The testdrive could not be saved. Please, try again.'));
			}
		}
		$carmodels = $this->Testdrive->Carmodel->find('list');
		$users = $this->Testdrive->User->find('list');
		$this->set(compact('carmodels', 'users'));
	}

	/**
	 * edit method
	 *
	 * @throws NotFoundException
	 * @param string $id
	 * @return void
	 */
	public function edit($id = null) {
		if (!$this->Testdrive->exists($id)) {
			throw new NotFoundException(__('Invalid testdrive'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->Testdrive->save($this->request->data)) {
				$this->Session->setFlash(__('The testdrive has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The testdrive could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Testdrive.' . $this->Testdrive->primaryKey => $id));
			$this->request->data = $this->Testdrive->find('first', $options);
		}
		$carmodels = $this->Testdrive->Carmodel->find('list');
		$users = $this->Testdrive->User->find('list');
		$this->set(compact('carmodels', 'users'));
	}

	/**
	 * delete method
	 *
	 * @throws NotFoundException
	 * @param string $id
	 * @return void
	 */
	public function delete($id = null) {
		$this->Testdrive->id = $id;
		if (!$this->Testdrive->exists()) {
			throw new NotFoundException(__('Invalid testdrive'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Testdrive->delete()) {
			$this->Session->setFlash(__('The testdrive has been deleted.'));
		} else {
			$this->Session->setFlash(__('The testdrive could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}

	/**
	 * landingpage method
	 *
	 * @return void
	 */
	public function landingpage($user_id, $model_id) {

		$this->layout = 'front';
		
		if (!$this->Testdrive->Carmodel->exists($model_id)) {
			throw new NotFoundException(__('Invalid carmodel'));
		}
		
		if ($this->request->is('post')) {
			
			$data = $this->request->data;
			$data['Testdrive']['testdrivedate'] = DboSource::expression('NOW()');
			$data['Testdrive']['carmodel_id'] = $model_id; 
			$data['Testdrive']['user_id'] = $user_id; 
		
			if(isset($data['Testdrive']['customer_contact']) && $data['Testdrive']['customer_contact'] != '')
			{
				$contact_no = $data['Testdrive']['customer_contact'];

				$this->Testdrive->create();
				if ($this->Testdrive->save($data)) {
					
					$dealerinfo = $this->Testdrive->Carmodel->find('first', array(
						'contain' => array(
							'Carbrand.User' => array(
								'conditions' => array('isDealer' => 1),
								'fields' => array('name', 'email')
							),
						),
						'conditions' => array('Carmodel.id' => $model_id),
					)); 
					
					if(count($dealerinfo) > 0)
					{
						$to_email = $dealerinfo['Carbrand']['User']['email'];
						$brand = $dealerinfo['Carbrand']['brandname'];
						$model = $dealerinfo['Carmodel']['modelname'];

						if($to_email != '' && $brand != '' && $model != '')
						{
							$Email = new CakeEmail('smtp');
							$Email->emailFormat('html');
							$Email->template('testdriverequest');
							$Email->viewVars(array('brand' => $brand, 'model' => $model, 'number' => $contact_no));
							$Email->to($to_email);
							$Email->subject('Request for test drive');
							//$message = "Hello, <br/> One test drive request from customer, <b>contact number:".$contact_no."</b>";
							$Email->send();
						}
					}
					
					$this->redirect('thankyou');
				}
				else {
					$this->set(__('The request could not be completed. Please, try again.'));
				}
			}
			else {
				$this->set(__('The request could not be completed. Please, try again.'));
			}
			 
		}
		else
		{
			/*
			$options = array('conditions' => array('Carmodel.' . $this->Carmodel->primaryKey => $model_id));
			$this->set('carmodel', $this->Carmodel->find('first', $options));
			*/
		}
	}
	
	/**
	 * thankyou method
	 *
	 * @return void
	 */
	public function thankyou() {
		$this->layout = 'front';
	}

	/**
	 * admin_setstatus method
	 * @param Integer $id [testdrive id]
	 * @param Boolean $status [0/1]
	 * @param String $flag ['scheduled'/'bought']
	 * @return void
	 */
	public function admin_setstatus($id, $status=0, $flag) {
		
		if(!$this->Auth->user('isDealer'))
			$this->redirect('index');

		$this->Testdrive->id = $id;
		
		if (!$this->Testdrive->exists()) {
			throw new NotFoundException(__('Invalid Access!'));
		}
			
		$carmodel_id = $this->Testdrive->field('carmodel_id');
		$requestfordriverexists = $this->Testdrive->Carmodel->find('count', array(
			'recursive' => 0,
			'conditions' => array(
				'Carbrand.user_id' => $this->Auth->user('id'),
				'Carmodel.id' => $carmodel_id
			)
		));
		
		if(!$requestfordriverexists)
			throw new NotFoundException(__('Invalid Access!'));

		$options = array('Testdrive.' . $this->Testdrive->primaryKey => $id);
		
		$updateField = array();
		if($flag == 'scheduled')
		{
			$updateField = array('Testdrive.scheduled' => $status);

			if($status)
				$msg = "The test drive request has been scheduled";
			else
				$msg = "The test drive request has not been scheduled";
		}
		else if($flag == 'bought')
		{
			$updateField = array('Testdrive.bought' => $status);

			if($status)
				$msg = "The test drive request has been bought";
			else
				$msg = "The test drive request has not been bought";
		}
		
		if($this->Testdrive->updateAll($updateField, $options))
		{
			$this->Session->setFlash(__($msg));
		}
		else {
			$this->Session->setFlash(__('Please, try again.'));
		}
		
		return $this->redirect(array('action' => 'index'));
	}
		
	/**
	 * admin_index method
	 *
	 * @return void
	 */
	public function admin_index() {
		
		if(!$this->Auth->user('isDealer') && !$this->Auth->user('isAdmin') )
			$this->redirect('listrequests');
		
		$dconditions = array();

		$this->loadmodel('Carbrand');
		
		$alreadySet = false;
		if($this->request->is('post'))
		{
			$data = $this->request->data;
			
			if(isset($data['Testdrive']['carbrand_id']) && $data['Testdrive']['carbrand_id'] != 0)
			{
				$dconditions['Carmodel.carbrand_id'] = $data['Testdrive']['carbrand_id'];
				$alreadySet = true;
			}
		}

		$conditions = array();
		if($this->Auth->user('isDealer'))
		{
			$conditions = array('Carbrand.user_id' => $this->Auth->user('id'));
		}

		$carbrands = $this->Carbrand->find('list', array('conditions' => $conditions));
		
		$this->set('carbrands', $carbrands);
		
		if(!$alreadySet)
		{
			$dealer_brand_ids = array_keys($carbrands); 
			$d_in = "";
			if(!empty($dealer_brand_ids))
			{
				if(count($dealer_brand_ids) > 1)
					$d_in = " IN ";
			}
			
			$dconditions['Carmodel.carbrand_id '.$d_in] = $dealer_brand_ids;
		}
		//echo '<pre>'; print_r($dconditions); exit;
		
		$this->Testdrive->contain(array('Carmodel.Carbrand', 'User'));
		
		$this->set('testdrives', $this->Testdrive->find('all', array('conditions' => $dconditions)));

	}

	public function admin_listrequests() {

		if($this->Auth->user('isDealer') || $this->Auth->user('isAdmin') )
			$this->redirect('index');

		$dconditions['Testdrive.user_id'] = $this->Auth->user('id');
		
		if($this->request->is('post'))
		{
			$data = $this->request->data;
			
			if(isset($data['Testdrive']['carbrand_id']) && $data['Testdrive']['carbrand_id'] != 0)
			{
				$dconditions['Carmodel.carbrand_id'] = $data['Testdrive']['carbrand_id'];
			}
		}

		//$this->Testdrive->contain(array('Carmodel.Carbrand', 'User'));
		
		$options = array(
			'contain' => array('Carmodel.Carbrand', 'User'),
			'conditions' => $dconditions,
			'group' => 'Carmodel.id',
			'fields' => array('count(Carmodel.id) as totalrequests', 'Testdrive.*', 'Carmodel.*', 'User.*')
			//'fields' => array('Testdrive.id', 'Testdrive.customer_contact', 'Carmodel.modelname', 'User.name', 'count(Carmodel.id)')
		);
		//echo '<pre>'; print_r($options); exit;
		
		$this->set('testdrives', $this->Testdrive->find('all', $options));

		$this->loadModel('Carbrand');
		
		$carbrand_arr = $this->Carbrand->find('list');
		
		$this->set('carbrands', $carbrand_arr);
	}

	/**
	 * admin_view method
	 *
	 * @throws NotFoundException
	 * @param string $id
	 * @return void
	 */
	public function admin_view($id = null) {
		if (!$this->Testdrive->exists($id)) {
			throw new NotFoundException(__('Invalid testdrive'));
		}
		$options = array('conditions' => array('Testdrive.' . $this->Testdrive->primaryKey => $id));
		$this->set('testdrive', $this->Testdrive->find('first', $options));
	}

	/**
	 * admin_add method
	 *
	 * @return void
	 */
	 /*
	public function admin_add() {
		if ($this->request->is('post')) {
			$this->Testdrive->create();
			if ($this->Testdrive->save($this->request->data)) {
				$this->Session->setFlash(__('The testdrive has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The testdrive could not be saved. Please, try again.'));
			}
		}
		$carmodels = $this->Testdrive->Carmodel->find('list');
		$users = $this->Testdrive->User->find('list');
		$this->set(compact('carmodels', 'users'));
	}
	*/

	/**
	 * admin_edit method
	 *
	 * @throws NotFoundException
	 * @param string $id
	 * @return void
	 */
	 /*
	public function admin_edit($id = null) {
		if (!$this->Testdrive->exists($id)) {
			throw new NotFoundException(__('Invalid testdrive'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->Testdrive->save($this->request->data)) {
				$this->Session->setFlash(__('The testdrive has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The testdrive could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Testdrive.' . $this->Testdrive->primaryKey => $id));
			$this->request->data = $this->Testdrive->find('first', $options);
		}
		$carmodels = $this->Testdrive->Carmodel->find('list');
		$users = $this->Testdrive->User->find('list');
		$this->set(compact('carmodels', 'users'));
	}
	*/

	/**
	 * admin_delete method
	 *
	 * @throws NotFoundException
	 * @param string $id
	 * @return void
	 */
	public function admin_delete($id = null) {
		$this->Testdrive->id = $id;
		if (!$this->Testdrive->exists()) {
			throw new NotFoundException(__('Invalid testdrive'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Testdrive->delete()) {
			$this->Session->setFlash(__('The testdrive has been deleted.'));
		} else {
			$this->Session->setFlash(__('The testdrive could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
}
